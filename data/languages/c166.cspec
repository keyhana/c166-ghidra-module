<?xml version="1.0" encoding="UTF-8"?>

<!-- See Relax specification: Ghidra/Framework/SoftwareModeling/data/languages/compiler_spec.rxg -->

<compiler_spec>
    <stackpointer register="r0" space="ram" growth="negative"/>

    <returnaddress>
        <varnode space="stack" offset="0" size="0"/>  <!-- Set size to zero since we're ignoring call/ret stacks for decompilation -->
    </returnaddress>

    <data_organization>
        <pointer_size value="3"/>
    </data_organization>

    <callfixup name="call_far_indirect">
        <target name="__call_far_indirect"/>
        <pcode>
            <body><![CDATA[
	    local callAddr:3 = (zext(r5) << 16) | zext(r4);
	    call [callAddr];
	    ]]></body>
        </pcode>
    </callfixup>

    <callotherfixup targetop="push">
        <pcode >
            <input name="val" size="2"/>
            <body><![CDATA[
            tmpptr:4 = 0;
      ]]></body>
        </pcode>
    </callotherfixup>

    <callotherfixup targetop="pop">
        <pcode>
            <input name="val" size="2"/>
            <body><![CDATA[
            tmpptr:4 = 0;
      ]]></body>
        </pcode>
    </callotherfixup>

    <callotherfixup targetop="GetPagedOffset">
        <pcode dynamic="true">
            <input name="mem" size="2"/>
            <output name="off" size="3"/>
        </pcode>
    </callotherfixup>

    <callotherfixup targetop="CopyVarnode">
        <pcode dynamic="true">
            <input name="in"/>
            <output name="out"/>
        </pcode>
    </callotherfixup>

    <global>
        <range space="ram"/>
    </global>

    <default_proto>
        <prototype name="__stdcall" extrapop="0" stackshift="0" strategy="register">
            <input>
                <pentry minsize="1" maxsize="2">
                    <register name="r12"/>
                </pentry>
                <pentry minsize="1" maxsize="2">
                    <register name="r13"/>
                </pentry>
                <pentry minsize="1" maxsize="2">
                    <register name="r14"/>
                </pentry>
                <pentry minsize="1" maxsize="2">
                    <register name="r15"/>
                </pentry>
                <pentry minsize="1" maxsize="500" align="2">
                    <addr offset="0" space="stack"/>
                </pentry>
            </input>
            <output>
                <pentry minsize="1" maxsize="1">
                    <register name="RL4"/>
                </pentry>
                <pentry minsize="1" maxsize="2">
                    <register name="r4"/>
                </pentry>
                <pentry minsize="1" maxsize="2">
                    <register name="r5"/>
                </pentry>
                <pentry minsize="3" maxsize="4">
                    <addr space="join" piece1="r5" piece2="r4"/>
                </pentry>
            </output>
            <unaffected>
                <register name="r0"/>
                <register name="r6"/>
                <register name="r7"/>
                <register name="r8"/>
                <register name="r9"/>
            </unaffected>
            <killedbycall>
                <register name="r1"/>       <!-- Volatile registers -->
                <register name="r2"/>
                <register name="r3"/>
                <register name="r4"/>
                <register name="r5"/>
                <register name="r10"/>
                <register name="r11"/>
                <register name="PSW"/>      <!-- PSW is volatile -->
            </killedbycall>
        </prototype>
    </default_proto>

		<prototype name="__r2_r5_call" extrapop="4" stackshift="4" strategy="register">
			<input>
				<pentry minsize="1" maxsize="2">
					<register name="r2" />
				</pentry>
				<pentry minsize="1" maxsize="2">
					<register name="r3" />
				</pentry>
				<pentry minsize="3" maxsize="4">
					<addr space="join" piece1="r3" piece2="r2"/>
				</pentry>
				<pentry minsize="1" maxsize="2">
					<register name="r4" />
				</pentry>
				<pentry minsize="1" maxsize="2">
					<register name="r5" />
				</pentry>
				<pentry minsize="3" maxsize="4">
					<addr space="join" piece1="r5" piece2="r4"/>
				</pentry>
				<pentry minsize="1" maxsize="500" align="2">
					<addr offset="16" space="stack"/>
				</pentry>
			</input>
			<output>
				<pentry minsize="1" maxsize="1">
					<register name="RL2" />
				</pentry>
				<pentry minsize="2" maxsize="2">
					<register name="r2" />
				</pentry>
				<pentry minsize="3" maxsize="4">
					<addr space="join" piece1="r3" piece2="r2"/>
				</pentry>
			</output>
            <killedbycall>
                <register name="r1"/>       <!-- Volatile registers -->
                <register name="r2"/>
                <register name="r3"/>
                <register name="r4"/>
                <register name="r5"/>
            </killedbycall>
	      <localrange>
	        <range space="stack" first="0xF600" last="0xFFFF"/>
	      </localrange>
		</prototype>

</compiler_spec>
